from Crypto.Util.number import long_to_bytes, inverse
from sympy import cbrt
from decimal import *

n = [14528915758150659907677315938876872514853653132820394367681510019000469589767908107293777996420037715293478868775354645306536953789897501630398061779084810058931494642860729799059325051840331449914529594113593835549493208246333437945551639983056810855435396444978249093419290651847764073607607794045076386643023306458718171574989185213684263628336385268818202054811378810216623440644076846464902798568705083282619513191855087399010760232112434412274701034094429954231366422968991322244343038458681255035356984900384509158858007713047428143658924970374944616430311056440919114824023838380098825914755712289724493770021, 20463913454649855046677206889944639231694511458416906994298079596685813354570085475890888433776403011296145408951323816323011550738170573801417972453504044678801608709931200059967157605416809387753258251914788761202456830940944486915292626560515250805017229876565916349963923702612584484875113691057716315466239062005206014542088484387389725058070917118549621598629964819596412564094627030747720659155558690124005400257685883230881015636066183743516494701900125788836869358634031031172536767950943858472257519195392986989232477630794600444813136409000056443035171453870906346401936687214432176829528484662373633624123, 19402640770593345339726386104915705450969517850985511418263141255686982818547710008822417349818201858549321868878490314025136645036980129976820137486252202687238348587398336652955435182090722844668488842986318211649569593089444781595159045372322540131250208258093613844753021272389255069398553523848975530563989367082896404719544411946864594527708058887475595056033713361893808330341623804367785721774271084389159493974946320359512776328984487126583015777989991635428744050868653379191842998345721260216953918203248167079072442948732000084754225272238189439501737066178901505257566388862947536332343196537495085729147]
e = 3
c = [6965891612987861726975066977377253961837139691220763821370036576350605576485706330714192837336331493653283305241193883593410988132245791554283874785871849223291134571366093850082919285063130119121338290718389659761443563666214229749009468327825320914097376664888912663806925746474243439550004354390822079954583102082178617110721589392875875474288168921403550415531707419931040583019529612270482482718035497554779733578411057633524971870399893851589345476307695799567919550426417015815455141863703835142223300228230547255523815097431420381177861163863791690147876158039619438793849367921927840731088518955045807722225, 5109363605089618816120178319361171115590171352048506021650539639521356666986308721062843132905170261025772850941702085683855336653472949146012700116070022531926476625467538166881085235022484711752960666438445574269179358850309578627747024264968893862296953506803423930414569834210215223172069261612934281834174103316403670168299182121939323001232617718327977313659290755318972603958579000300780685344728301503641583806648227416781898538367971983562236770576174308965929275267929379934367736694110684569576575266348020800723535121638175505282145714117112442582416208209171027273743686645470434557028336357172288865172, 5603386396458228314230975500760833991383866638504216400766044200173576179323437058101562931430558738148852367292802918725271632845889728711316688681080762762324367273332764959495900563756768440309595248691744845766607436966468714038018108912467618638117493367675937079141350328486149333053000366933205635396038539236203203489974033629281145427277222568989469994178084357460160310598260365030056631222346691527861696116334946201074529417984624304973747653407317290664224507485684421999527164122395674469650155851869651072847303136621932989550786722041915603539800197077294166881952724017065404825258494318993054344153]

e = 3

N = n[0]*n[1]*n[2]
N1 = N//n[0]
N2 = N//n[1]
N3 = N//n[2]

u1 = inverse(N1, n[0])
u2 = inverse(N2, n[1])
u3 = inverse(N3, n[2])

M = (c[0]*u1*N1 + c[1]*u2*N2 + c[2]*u3*N3) % N
M = Decimal(M)
pt = int(cbrt(M))
print(long_to_bytes(pt))

# #!/usr/bin/env python3
# from gmpy2 import *
# from Crypto.Util import number
# from itertools import combinations


# def load_output():
#     ret = {'n':[], 'c':[]}
#     with open("output_0ef6d6343784e59e2f44f61d2d29896f.txt", 'rb') as fd:
#         while True:
#             line = fd.readline()
#             if not line: break
#             line = line.strip().decode()
#             if not line: continue
            
#             k, v = line.split('=')
#             k = k.strip()
#             if k == 'e':
#                 continue
#             ret[k].append(int(v))

#     return ret

# def decrypt(grps, e):
#     for grp in combinations(zip(grps['n'], grps['c']), e):
#         N = 1
#         for x in grp: N *= x[0]

#         M = 0
#         for x in grp:
#             M += x[1]*number.inverse(N//x[0], x[0])*(N//x[0])
#         M %= N

#         m, exact = root(M, e)
#         if exact:
#             print(number.long_to_bytes(m))


# # Reference
# # [Hastadâ€™s Broadcast Attack](https://bitsdeep.com/posts/attacking-rsa-for-fun-and-ctf-points-part-2/)
# grps = load_output()
# decrypt(grps, 3)